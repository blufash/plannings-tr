<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<title>Planning Trains</title>
<style>
body { font-family: Arial; background:#f4f6f9; text-align:center; padding:20px; }
h1 { color:#0077cc; }
.tabs { margin:20px 0; }
.tab { display:inline-block; margin:5px; padding:10px 15px; background:#ddd; border-radius:5px; cursor:pointer; }
.tab.active { background:#0077cc; color:#fff; }
form { margin:15px 0; display:inline-block; }
input, button { padding:7px; margin:5px; border-radius:5px; border:1px solid #ccc; }
ul { list-style:none; padding:0; }
li { background:#fff; margin:5px auto; padding:10px; border-radius:6px; width:320px; display:flex; justify-content:space-between; align-items:center; }
.actions button { margin-left:5px; }
</style>
</head>
<body>

<h1>🚂 Planning des trains</h1>

<div class="tabs" id="joursTabs"></div>

<form id="trainForm">
  <input type="text" id="numero" placeholder="Numéro de train (ex: EVO5525)" pattern="[A-Za-z0-9]+" required>
  <input type="time" id="horaire" required>
  <button type="submit">Ajouter</button>
</form>

<ul id="listeTrains"></ul>

<audio id="alarme" src="https://www.soundjay.com/buttons/sounds/beep-07.mp3" preload="auto"></audio>

<script>
const jours = ["Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi","Dimanche"];
const tabs = document.getElementById('joursTabs');
const liste = document.getElementById('listeTrains');
const form = document.getElementById('trainForm');
const alarme = document.getElementById('alarme');

let jourActif = jours[new Date().getDay()-1] || "Dimanche";

// Onglets
jours.forEach(jour => {
  const tab = document.createElement('div');
  tab.textContent = jour;
  tab.classList.add('tab');
  if(jour === jourActif) tab.classList.add('active');
  tab.onclick = () => { jourActif = jour; majTabs(); afficherTrains(); };
  tabs.appendChild(tab);
});

function majTabs(){
  Array.from(tabs.children).forEach(t => t.classList.toggle('active', t.textContent===jourActif));
}

// Fonctions pour appeler les serverless Netlify
async function getTrains() {
  const res = await fetch(`/.netlify/functions/getTrains?jour=${jourActif}`);
  return res.json();
}

async function addTrain(numero, horaire) {
  await fetch(`/.netlify/functions/addTrain`, {
    method:"POST",
    headers:{ "Content-Type":"application/json" },
    body: JSON.stringify({ numero, horaire, jour: jourActif })
  });
}

async function updateTrain(id, numero, horaire) {
  await fetch(`/.netlify/functions/updateTrain`, {
    method:"POST",
    headers:{ "Content-Type":"application/json" },
    body: JSON.stringify({ id, numero, horaire })
  });
}

async function deleteTrain(id) {
  if(confirm("Êtes-vous sûr de vouloir supprimer ce train ?")){
    await fetch(`/.netlify/functions/deleteTrain?id=${id}`);
  }
}

// Affichage
async function afficherTrains(){
  liste.innerHTML="";
  const trains = await getTrains();
  trains.sort((a,b) => a.horaire.localeCompare(b.horaire));
  trains.forEach(t => {
    const li = document.createElement('li');
    li.innerHTML = `<span>Train ${t.numero} - ${t.horaire}</span>`;
    const actions = document.createElement('div');
    actions.className="actions";

    const btnEdit = document.createElement('button');
    btnEdit.textContent="✏️";
    btnEdit.onclick = async () => {
      const nouveauNumero = prompt("Nouveau numéro ?", t.numero);
      const nouvelHoraire = prompt("Nouvel horaire (HH:MM) ?", t.horaire);
      if(nouveauNumero && nouvelHoraire.match(/^\d{2}:\d{2}$/)){
        await updateTrain(t.id,nouveauNumero,nouvelHoraire);
        afficherTrains();
      }
    };

    const btnDel = document.createElement('button');
    btnDel.textContent="🗑️";
    btnDel.onclick = async () => { await deleteTrain(t.id); afficherTrains(); };

    actions.appendChild(btnEdit);
    actions.appendChild(btnDel);
    li.appendChild(actions);
    liste.appendChild(li);
  });
}

form.addEventListener('submit', async e => {
  e.preventDefault();
  const numero = document.getElementById('numero').value.trim();
  const horaire = document.getElementById('horaire').value;
  if(!numero.match(/^[A-Za-z0-9]+$/) || !horaire) return;
  await addTrain(numero,horaire);
  form.reset();
  afficherTrains();
});

// Alarme (simple)
async function checkAlarme(){
  const now = new Date();
  const heureActuelle = now.toTimeString().slice(0,5);
  const trains = await getTrains();
  trains.forEach(t=>{
    if(t.horaire===heureActuelle && !t.triggered){
      t.triggered = true;
      alarme.play();
      alert(`🚂 Train ${t.numero} (${t.jour} - ${t.horaire}) !`);
    }
  });
}
setInterval(checkAlarme,1000);

afficherTrains();
</script>
</body>
</html>
